scalar Void

type Query {
  family: Family
  familyId: FamilyId
  timelinesDoneToday: [Timeline]
  kazisRemainedToday: [Kazi]
  kazisToday: [DispKazi]
  categories: [Category]
}

type Mutation {
  login: UserAuth
  updateUser(name: String): UserAuth
  addFamily(name: String): Family
  joinFamily(name: String): Family
  addCategory(name: String): Category
  addKazi(
    name: String
    categoryId: String
    point: Int
    repeatType: String
    activatedAt: String
  ): DispKazi
  doneKazi(kaziId: ID): Timeline
  updateTimeline(
    id: ID
    memo: String
    uid: ID
    userName: String
    doneAt: String
  ): Void
}

type Category {
  id: ID!
  name: String!
}

type FamilyId {
  id: String
}

type Family {
  id: ID!
  name: String
  users: [User]
}

type Kazi {
  id: ID!
  familyId: ID!
  family: Family!
  categoryId: ID!
  category: Category!
  name: String!
  point: Int!
  repeat: Repeat!
}

type DispKazi {
  id: ID!
  familyId: ID!
  family: Family!
  categoryId: ID!
  category: Category!
  name: String!
  point: Int!
  repeat: Repeat!
  timelineId: ID
  user: User
  doneAt: String
  memo: String
}

type Repeat {
  type: String!
  activatedAt: String!
}

type Timeline {
  id: ID!
  kazi: Kazi!
  user: User!
  doneAt: String!
  memo: String
}

type User {
  uid: ID!
  name: String
  family: Family
}

type UserAuth{
  uid: ID!
  name: String
  familyId: ID
}
